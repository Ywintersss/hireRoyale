name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} # private key, stored as GitHub secret
      IMAGE_NAME: hireroyalebackend
      HOST_PORT: 7000
      CONTAINER_PORT: 8000

    steps:
      # 1️⃣ Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # 3️⃣ Build and push Docker image
      - name: Build and push Docker image
        working-directory: talentacquisition/backend
        run: |
          docker build -t $IMAGE_NAME:latest -f dockerfile .
          docker tag $IMAGE_NAME:latest $DOCKER_USERNAME/$IMAGE_NAME:latest
          docker push $DOCKER_USERNAME/$IMAGE_NAME:latest


  deploy-ec2:
    needs: docker-build-and-push
    runs-on: ubuntu-latest

    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_KEY: ${{ secrets.EC2_KEY }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      IMAGE_NAME: hireroyalebackend
      CONTAINER_NAME: hireroyalebackend
      HOST_PORT: 7000
      CONTAINER_PORT: 8000


    steps:
      # 4️⃣ SSH into EC2 and deploy
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          script: |
            # ====== CONFIG ======
            CONTAINER_NAME="hireroyalebackend"
            IMAGE_NAME="hireroyalebackend"
            DOCKER_USERNAME=${{ env.DOCKER_USERNAME }}   
            HOST_PORT=7000
            CONTAINER_PORT=8000
            # ====================

            echo ">>> Cleaning up old containers..."
            CONTAINERS=$(docker ps -aq)
            if [ -n "$CONTAINERS" ]; then
              echo "Stopping containers: $CONTAINERS"
              docker stop $CONTAINERS || true
              echo "Removing containers: $CONTAINERS"
              docker rm -f $CONTAINERS || true
            else
              echo "No containers found."
            fi

            echo ">>> Removing old images..."
            # Find old images by repo name and remove them
            docker images "$DOCKER_USERNAME/$IMAGE_NAME" -q | xargs -r docker rmi -f

            echo ">>> Pulling latest image..."
            docker pull $DOCKER_USERNAME/$IMAGE_NAME:latest

            echo ">>> Running new container..."
            docker run -d -p $HOST_PORT:$CONTAINER_PORT --name $CONTAINER_NAME $DOCKER_USERNAME/$IMAGE_NAME:latest

            echo ">>> Deployment complete!"
            docker ps --filter "name=$CONTAINER_NAME"
