name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  generate-prisma-client:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node dependencies and generate Prisma client
        # working-directory: talentacquisition/backend
        run: |
          cd talentacquisition/backend
          npm install
          npx prisma generate
  docker-build-and-push:
    needs: generate-prisma-client
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} # private key, stored as GitHub secret
      IMAGE_NAME: hireroyalebackend
      HOST_PORT: 7000
      CONTAINER_PORT: 8000

    steps:
      # 1️⃣ Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # 3️⃣ Build and push Docker image
      - name: Build and push Docker image
        working-directory: talentacquisition/backend
        run: |
          docker build -t $IMAGE_NAME:latest -f dockerfile .
          docker tag $IMAGE_NAME:latest $DOCKER_USERNAME/$IMAGE_NAME:latest
          docker push $DOCKER_USERNAME/$IMAGE_NAME:latest


  deploy-ec2:
    needs: docker-build-and-push
    runs-on: ubuntu-latest

    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_KEY: ${{ secrets.EC2_KEY }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      IMAGE_NAME: hireroyalebackend
      CONTAINER_NAME: hireroyalebackend
      HOST_PORT: 7000
      CONTAINER_PORT: 8000


    steps:
      # 4️⃣ SSH into EC2 and deploy
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          script: |
            echo "Stopping old container (if exists)..."
            docker stop $CONTAINER_NAME || true
            echo "Removing old container (if exists)..."
            docker rm $CONTAINER_NAME || true
            echo "Pulling latest image..."
            docker pull $DOCKER_USERNAME/$IMAGE_NAME:latest
            echo "Running new container..."
            docker run -d -p $HOST_PORT:$CONTAINER_PORT --name $CONTAINER_NAME $DOCKER_USERNAME/$IMAGE_NAME:latest
