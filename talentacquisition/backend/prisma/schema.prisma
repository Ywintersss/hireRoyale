generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite" // or "postgresql" / "mysql" in prod
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String
  email         String      @unique
  emailVerified Boolean     @default(false)
  image         String?
  contact       String?
  password      String?     // for email/password auth (via Account usually)
  
  // Enhanced profile fields
  location      String?     // User's location
  bio           String?     // User biography/description
  experience    String?     // Years of experience for job seekers
  skills        String?     // JSON array of skills for job seekers
  company       String?     // Company name for recruiters
  position      String?     // Job position/title for recruiters
  industry      String?     // Industry focus
  rating        Float?      @default(0.0) // User rating (0-5)
  isOnline      Boolean     @default(false) // Online status
  lastActive    DateTime?   // Last activity timestamp
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // relations
  jobRequirements JobRequirement[]
  sessions          Session[]
  accounts          Account[]
  roleId            String?
  role              Role?             @relation(fields: [roleId], references: [id])
  resumeId          String?           @unique
  resume            Resume?           @relation(fields: [resumeId], references: [id])
  eventsCreated     Event[]           @relation("UserEventsCreated")
  eventsJoined      UserEvent[]       @relation("UserEventsJoined")
  
  // Connection system
  sentConnections     Connection[]    @relation("ConnectionSender")
  receivedConnections Connection[]    @relation("ConnectionReceiver")
  
  liveConnections EventConnection[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  @@map("verification")
}

// Enhanced Resume model
model Resume {
  id          String  @id @default(cuid())
  resumeUrl   String
  fileName    String? // Original filename
  fileSize    Int?    // File size in bytes
  
  // Parsed resume data (more structured)
  summary     String? // Professional summary
  workHistory String? // JSON array of work experience
  education   String? // JSON array of education
  skills      String? // JSON array of skills
  
  // Legacy fields (keep for backward compatibility)
  parsedData1 String?
  parsedData2 String?
  parsedData3 String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // one-to-one with User
  user User?
}

model Role {
  id          String         @id @default(cuid())
  name        String        @unique // 'User', 'Recruiter', 'Admin'
  // displayName String?       // 'Job Seeker', 'Talent Recruiter', 'Administrator'
  // description String?       // Role description
  permissions RolePermission[]
  users       User[]
  @@map("role")
}

model Permission {
  id          String         @id @default(cuid())
  name        String        @unique
  description String?
  roles       RolePermission[]
  @@map("permission")
}

model RolePermission {
  roleId       String
  permissionId String
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  @@id([roleId, permissionId])
  @@map("role_permission")
}

model Event {
  id               String      @id @default(cuid())
  name             String
  description      String?
  date             DateTime?
  time             DateTime?
  requirements     String?     // JSON array of requirements
  status           String?     // 'upcoming', 'active', 'completed', 'cancelled'
  maxParticipants  Int?
  industry         String?
  level            String?     // 'Entry', 'Mid', 'Senior', 'All Levels'
  imgUrl           String?
  
  // Enhanced event fields
  eventType        String?     // 'networking', 'job_fair', 'workshop', 'interview'
  location         String?     // Physical or virtual location
  timezone         String?     // Event timezone
  tags             String?     // JSON array of event tags
  
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  
  // relations
  createdById String
  createdBy   User        @relation("UserEventsCreated", fields: [createdById], references: [id])
  participants UserEvent[] @relation("UserEventsJoined")
  connections  Connection[] @relation("EventConnections")
  jobRequirements JobRequirement[]
  lobbies   Lobby[]
}

model UserEvent {
  userId       String
  eventId      String
  requirements String?     // User-specific requirements for this event
  joinedAt     DateTime    @default(now())
  
  user  User  @relation("UserEventsJoined", fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation("UserEventsJoined", fields: [eventId], references: [id], onDelete: Cascade)
  
  @@id([userId, eventId])
  @@map("user_event")
}

// New Connection model for managing user connections
model Connection {
  id          String   @id @default(cuid())
  
  // Connection participants
  senderId    String   // User who initiated the connection
  receiverId  String   // User who received the connection request
  
  // Connection context
  eventId     String?  // Event where connection was made
  
  // Connection details
  status      String   // 'pending', 'accepted', 'declined', 'blocked'
  message     String?  // Optional message from sender
  
  // Meeting/call details
  roomId      String?  // Video call room identifier
  callStatus  String?  // 'not_started', 'active', 'ended'
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  sender      User     @relation("ConnectionSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ConnectionReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  event       Event?   @relation("EventConnections", fields: [eventId], references: [id])
  
  @@unique([senderId, receiverId, eventId]) // Prevent duplicate connections in same event
  @@map("connection")
}

model EventConnection {
  id      String @id @default(cuid())
  userId  String
  lobbyId String
  joinedAt DateTime @default(now())

  user   User  @relation(fields: [userId], references: [id])
  lobby  Lobby @relation(fields: [lobbyId], references: [id])
  @@unique([userId, lobbyId])
}

model Lobby {
  id        String   @id @default(cuid())
  name      String
  eventId   String   @unique

  event     Event     @relation(fields: [eventId], references: [id])
  users     EventConnection[]
}

model JobRequirement {
  id             String   @id @default(cuid())
  title          String
  description    String
  experienceLevel String
  requiredSkills String   
  location       String
  employmentType String
  salaryRange    String
  department     String
  isRemoteOk     Boolean  @default(false)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // relations
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId String
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("job_requirement")
}
